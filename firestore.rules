
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the requesting user is an admin.
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read their own profile.
      // An admin can read any user's profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));

      // Any authenticated user can update their own profile.
      // An admin can update any user's profile.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));

      // Only admins can create or delete users.
      allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Rules for user-specific subcollections (e.g., classes, notes, etc.)
    match /users/{userId}/{subcollection}/{docId} {
        // A user can do anything with their own subcollections.
        // An admin can also do anything.
        allow read, write, create, delete: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
    }
    
    // Rules for the 'forum' collection
    match /forum/{postId} {
      // Any authenticated user can read forum posts.
      allow read: if request.auth != null;
      // Only the author of the post or an admin can update or delete it.
      allow update, delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));
       // Any authenticated user can create a post.
      allow create: if request.auth != null;
    }

    // Rules for replies subcollection
    match /forum/{postId}/replies/{replyId} {
      // Any authenticated user can read replies.
      allow read: if request.auth != null;
       // Only the author of the reply or an admin can update or delete it.
      allow update, delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));
      // Any authenticated user can create a reply.
      allow create: if request.auth != null;
    }
    
    // Rules for comments on replies
    match /forum/{postId}/replies/{replyId}/comments/{commentId} {
        // Any authenticated user can read comments.
        allow read: if request.auth != null;
        // Only the author of the comment or an admin can delete it.
        allow delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));
        // Any authenticated user can create a comment.
        allow create: if request.auth != null;
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
        // Any authenticated user can read notifications
        allow read: if request.auth != null;
        // Only an admin can create or delete notifications
        allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

  }
}

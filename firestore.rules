rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read their own profile
      allow get: if request.auth.uid == userId || isAdmin(request.auth.uid);
      // Allow admins to list all users for the admin panel
      allow list: if isAdmin(request.auth.uid);
      // Allow users to create their own profile upon signup
      allow create: if request.auth.uid == userId;
      // Allow users to update their own profile, OR allow an admin to update any user's profile
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      // Allow only admins to delete users (from Firestore, Auth deletion needs a function)
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Rules for user-specific subcollections (classes, notes, etc.)
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth.uid == userId;
    }

    // Rules for the 'forum' collection
    match /forum/{postId}/{document=**} {
        // Any authenticated user can read any post, reply, or comment
        allow read: if request.auth != null;
        
        // Write/update/delete rules are more specific
        // Post creation is handled by 'addPost' logic, allow write for the document itself
        allow write: if request.auth.uid == resource.data.author.uid || isAdmin(request.auth.uid);
        allow create: if request.auth.uid != null;
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
        // Any authenticated user can read notifications
        allow read: if request.auth != null;
        // Only admins can create, update, or delete notifications
        allow write: if isAdmin(request.auth.uid);
    }
  }
}

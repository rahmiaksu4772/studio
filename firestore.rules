rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Users can only read their own profile, but admins can read any profile.
    // Any authenticated user can create their own profile.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow create: if request.auth.uid == userId;
      
      // Users can update their own profile.
      // Admins can update any user's profile (e.g., to change their role).
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      
      // Only admins can delete users.
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Notifications can be read by any authenticated user, but only created/deleted by an admin.
    match /notifications/{notificationId} {
       allow read: if request.auth != null;
       allow write: if isAdmin(request.auth.uid);
    }
    
    // Forum posts can be read by any authenticated user.
    // Users can create posts, but can only edit/delete their own posts. Admins can delete any post.
    match /forum/{postId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.author.uid;
        allow update: if request.auth.uid == resource.data.author.uid;
        allow delete: if request.auth.uid == resource.data.author.uid || isAdmin(request.auth.uid);

        // Rules for replies subcollection
        match /replies/{replyId} {
            allow read: if request.auth != null;
            allow create: if request.auth.uid == request.resource.data.author.uid;
            allow update: if request.auth.uid == resource.data.author.uid;
            allow delete: if request.auth.uid == resource.data.author.uid || isAdmin(request.auth.uid);

            // Rules for comments sub-subcollection
            match /comments/{commentId} {
                allow read: if request.auth != null;
                allow create: if request.auth.uid == request.resource.data.author.uid;
                allow update: if request.auth.uid == resource.data.author.uid;
                allow delete: if request.auth.uid == resource.data.author.uid || isAdmin(request.auth.uid);
            }
        }
    }

    // A user can only access the subcollections (classes, notes, etc.) under their own user document.
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}

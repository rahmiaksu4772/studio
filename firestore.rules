rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own profile
      allow create: if request.auth != null;
      
      // A user can read their own profile. An admin can read any profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      
      // A user can update their own profile. An admin can update any profile (including the 'role').
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));

      // Only an admin can delete a user document (this doesn't delete from Auth service)
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Rules for all subcollections of a user
    match /users/{userId}/{document=**} {
       allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Notifications can be read by any authenticated user, but only created/deleted by an admin.
    match /notifications/{notificationId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Forum posts can be read by any authenticated user.
    // Users can create/update/delete their own posts. Admins can delete any post.
    match /forum/{postId} {
        allow read: if request.auth != null;
        allow create, update: if request.auth != null && request.auth.uid == request.resource.data.author.uid;
        allow delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));

        // Rules for replies subcollection
        match /replies/{replyId} {
            allow read: if request.auth != null;
            allow create, update: if request.auth != null && request.auth.uid == request.resource.data.author.uid;
            allow delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));

            // Rules for comments sub-subcollection
            match /comments/{commentId} {
                allow read: if request.auth != null;
                allow create, update: if request.auth != null && request.auth.uid == request.resource.data.author.uid;
                allow delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));
            }
        }
    }
  }
}

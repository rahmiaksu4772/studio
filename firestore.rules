
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read their own profile.
      // An admin can read any user's profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));

      // Any authenticated user can create their own profile document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can update their own profile data.
      // An admin can update any user's profile data (including their role).
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      
      // Only an admin can delete a user document. A user cannot delete their own document.
      allow delete: if request.auth != null && isAdmin(request.auth.uid);

      // Rules for user subcollections
      match /{subcollection}/{docId} {
        // A user can manage their own subcollections (classes, notes, plans, etc.)
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for the 'forum' collection
    match /forum/{postId} {
      // Any authenticated user can read forum posts.
      allow read: if request.auth != null;
      // Any authenticated user can create a new post.
      allow create: if request.auth != null;
      // Only the author of the post or an admin can update/delete it.
      allow update, delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));

      // Rules for replies subcollection
      match /replies/{replyId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));

        // Rules for comments sub-subcollection
        match /comments/{commentId} {
          allow read: if request.auth != null;
          allow create: if request.auth != null;
          allow update, delete: if request.auth != null && (resource.data.author.uid == request.auth.uid || isAdmin(request.auth.uid));
        }
      }
    }
    
    // Rules for the top-level 'notifications' collection
    match /notifications/{notificationId} {
       // Any authenticated user can read notifications.
       allow read: if request.auth != null;
       // Only admins can create (send) or delete notifications.
       allow create, delete: if request.auth != null && isAdmin(request.auth.uid);
       // Notifications are immutable by users.
       allow update: if false;
    }
  }
}
